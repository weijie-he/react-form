[{"C:\\Users\\test\\Documents\\ReactProject\\react-form\\src\\index.js":"1","C:\\Users\\test\\Documents\\ReactProject\\react-form\\src\\HookForm.js":"2","C:\\Users\\test\\Documents\\ReactProject\\react-form\\src\\FormikForm.js":"3","C:\\Users\\test\\Documents\\ReactProject\\react-form\\src\\HookForm2.js":"4","C:\\Users\\test\\Documents\\ReactProject\\react-form\\src\\FormikForm2.js":"5"},{"size":1386,"mtime":1607066082024,"results":"6","hashOfConfig":"7"},{"size":6084,"mtime":1607051004090,"results":"8","hashOfConfig":"7"},{"size":7387,"mtime":1606992508820,"results":"9","hashOfConfig":"7"},{"size":2665,"mtime":1607066284558,"results":"10","hashOfConfig":"7"},{"size":2376,"mtime":1607066261858,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1r4wls9",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"14"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},"C:\\Users\\test\\Documents\\ReactProject\\react-form\\src\\index.js",[],["27","28"],"C:\\Users\\test\\Documents\\ReactProject\\react-form\\src\\HookForm.js",["29"],"import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n// Messages\r\nconst required = \"This field is required\";\r\nconst maxLength = \"Your input exceed maximum length\";\r\n\r\n// Error Component\r\nconst errorMessage = error => {\r\n  return <div className=\"invalid-feedback\">{error}</div>;\r\n};\r\n\r\nvar array1 = []\r\nfor (var i=0;i<10;i++){\r\n  array1.push(i)\r\n}\r\n\r\nexport default () => {\r\n  const { register, handleSubmit, watch, errors } = useForm();\r\n  const onSubmit = data => console.log(\"data:\",data);\r\n\r\n  console.log(\"watch:\",watch(\"Username\"))// watch input value by passing the name of it\r\n  console.log(\"errors:\",errors)\r\n  console.log(\"ss\")\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"col-sm-12\">\r\n        <h3>React Hook Form</h3>\r\n      </div>\r\n      <div className=\"col-sm-12\">\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n           {/* 渲染 10 次 */}\r\n          { array1.map(i =>{return(\r\n          <>\r\n            <div className=\"form-group\">\r\n              <input\r\n                className=\"form-control\"\r\n                type=\"text\"\r\n                placeholder=\"Username\"\r\n                name={\"Username\"+i}\r\n                // 为每个检验项自定义报错信息\r\n                ref={register({ required: {value:true,message:\"用户名不能为空\"}, maxLength: {value:20,message:\"用户名不能超过20个字符\"} })}\r\n              />\r\n              {errors[\"Username\"+i] &&\r\n                errors[\"Username\"+i].type === \"required\" &&\r\n                errorMessage(errors[\"Username\"+i].message)}\r\n              {errors[\"Username\"+i] &&\r\n                errors[\"Username\"+i].type === \"maxLength\" &&\r\n                errorMessage(errors[\"Username\"+i].message)}\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"tel\"\r\n              placeholder=\"Mobile number\"\r\n              name={\"MobileNumber\"+i}\r\n              ref={register({ maxLength: 12 })}\r\n            />\r\n            {errors[\"MobileNumber\"+i] &&\r\n              errors[\"MobileNumber\"+i].type === \"maxLength\" &&\r\n              errorMessage(maxLength)}\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"email\"\r\n              placeholder=\"Email\"\r\n              name={\"Email\"+i}\r\n              ref={register({ required: true, pattern: /^\\S+@\\S+$/i })}\r\n            />\r\n            {errors[\"Email\"+i] &&\r\n              errors[\"Email\"+i].type === \"required\" &&\r\n              errorMessage(required)}\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"url\"\r\n              placeholder=\"Website\"\r\n              name={\"Website\"+i}\r\n              ref={register}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              placeholder=\"Password\"\r\n              name={\"Password\"+i}\r\n              ref={register({ required: true })}\r\n            />\r\n            {errors[\"Password\"+i] &&\r\n              errors[\"Password\"+i].type === \"required\" &&\r\n              errorMessage(required)}\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label>Gender</label>\r\n            <br />\r\n            <div className=\"form-check form-check-inline\">\r\n              <input\r\n                className=\"form-check-input\"\r\n                type=\"radio\"\r\n                name={\"genderOptions\"+i}\r\n                value=\"Male\"\r\n                id=\"inlineRadio1\"\r\n                ref={register}\r\n              />\r\n              <label className=\"form-check-label\" htmlFor=\"inlineRadio1\">\r\n                Male\r\n              </label>\r\n            </div>\r\n            <div className=\"form-check form-check-inline\">\r\n              <input\r\n                className=\"form-check-input\"\r\n                type=\"radio\"\r\n                name={\"genderOptions\"+i}\r\n                value=\"Female\"\r\n                id=\"inlineRadio2\"\r\n                ref={register}\r\n              />\r\n              <label className=\"form-check-label\" htmlFor=\"inlineRadio2\">\r\n                Female\r\n              </label>\r\n            </div>\r\n            <div className=\"form-check form-check-inline\">\r\n              <input\r\n                className=\"form-check-input\"\r\n                type=\"radio\"\r\n                name={\"genderOptions\"+i}\r\n                value=\" Non-binary\"\r\n                id=\"inlineRadio3\"\r\n                ref={register}\r\n              />\r\n              <label className=\"form-check-label\" htmlFor=\"inlineRadio3\">\r\n                Non-binary\r\n              </label>\r\n            </div>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"datetime\"\r\n              placeholder=\"Date of Birth\"\r\n              name={\"DateofBirth\"+i}\r\n              ref={register({\r\n                pattern: /(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\d\\d/i\r\n              })}\r\n            />\r\n            {errors[\"DateofBirth\"+i] &&\r\n              errorMessage(\"Please use the following format MM/DD/YYYY\")}\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <textarea className=\"form-control\" name=\"About\" ref={register} />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"checkbox\"\r\n              placeholder=\"Subscribe to Newsletter\"\r\n              name={\"Subscribe to Newsletter\"+i}\r\n              id=\"customCheck1\"\r\n              ref={register}\r\n            />\r\n            <label htmlFor=\"customCheck1\"> Subscribe to Newsletter</label>\r\n          </div>\r\n          </>\r\n          )})\r\n          }\r\n          <div className=\"form-group\">\r\n            <input className=\"btn btn-primary\" type=\"submit\" />\r\n          </div>          \r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}","C:\\Users\\test\\Documents\\ReactProject\\react-form\\src\\FormikForm.js",["30"],"import React from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\n\r\n// Messages\r\nconst required = \"This field is required\";\r\nconst maxLength = \"Your input exceed maximum length\";\r\n\r\n// Error Component\r\nconst errorMessage = errorName => {\r\n  return <ErrorMessage name={errorName} component=\"div\" className=\"invalid-feedback\"/> \r\n};\r\n\r\nvar array1 = []\r\nfor (var i=0;i<10;i++){\r\n  array1.push(i)\r\n}\r\n\r\nvar initialValues = {}\r\nfor (i in array1){\r\n    initialValues[\"username\"+i]=\"\"\r\n    initialValues[\"mobilenumber\"+i]=\"\"\r\n    initialValues[\"email\"+i]=\"\"\r\n    initialValues[\"password\"+i]=\"\"\r\n    initialValues[\"url\"+i]=\"\"\r\n    initialValues[\"genderOptions\"+i]=\"\"\r\n    initialValues[\"DateofBirth\"+i]=\"\"\r\n    initialValues[\"SubscribetoNewsletter\"+i]=\"\"\r\n}\r\n\r\nconst validateUserName = value => {\r\n  let error;\r\n  if (!value) {\r\n    error = required;\r\n  } else if (value.length > 12) {\r\n    error = maxLength;\r\n  }\r\n  return error;\r\n};\r\n\r\nconst validateEmail = value => {\r\n  let error;\r\n  if (!value) {\r\n    error = required;\r\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\r\n    error = \"Invalid email address\";\r\n  }\r\n  return error;\r\n};\r\n\r\nconst validateMobileNumber = value => {\r\n  let error;\r\n  if (value.length > 12) {\r\n    error = maxLength;\r\n  }\r\n  return error;\r\n};\r\n\r\nconst validatePassword = value => {\r\n  let error;\r\n  if (!value) {\r\n    error = required;\r\n  }\r\n  return error;\r\n};\r\n\r\nconst validateDateOfBirth = value => {\r\n\r\n  let error;\r\n  if (!value) {\r\n    error = required;\r\n  } else if (\r\n    !/(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\d\\d/i.test(\r\n      value\r\n    )\r\n  ) {\r\n    error = \"Please use the following format MM/DD/YYYY\";\r\n  }\r\n  return error;\r\n};\r\n\r\nexport default () => {\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      onSubmit={(values, { setSubmitting }) => {\r\n        setTimeout(() => {\r\n          console.log(JSON.stringify(values, null, 2));\r\n          setSubmitting(false);\r\n        }, 400);\r\n      }}\r\n    >\r\n      {({ errors, touched, isValidating }) => (\r\n        <div className=\"container\">\r\n          <div className=\"col-sm-12\">\r\n            <h3>Formik</h3>\r\n          </div>\r\n          <div className=\"col-sm-12\">\r\n            <Form>\r\n           {/* 渲染 10 次 */}\r\n           { array1.map(i =>{return(     \r\n               <>           \r\n                <div className=\"form-group\">\r\n                    <Field\r\n                    className=\"form-control\"\r\n                    type=\"text\"\r\n                    placeholder=\"Username\"\r\n                    name={\"Username\"+i}\r\n                    validate={validateUserName}\r\n                    />\r\n                    {errorMessage(\"Username\"+i)}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <Field\r\n                    type=\"email\"\r\n                    name={\"email\"+i}\r\n                    className=\"form-control\"\r\n                    placeholder=\"Email\"\r\n                    validate={validateEmail}\r\n                    />\r\n                    {errorMessage(\"email\"+i)}                \r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <Field\r\n                    className=\"form-control\"\r\n                    type=\"tel\"\r\n                    placeholder=\"Mobile number\"\r\n                    name={\"mobilenumber\"+i}\r\n                    validate={validateMobileNumber}\r\n                    />\r\n                    {errorMessage(\"mobilenumber\"+i)}                                \r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <Field\r\n                    className=\"form-control\"\r\n                    type=\"url\"\r\n                    placeholder=\"Website\"\r\n                    name=\"Website\"\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <Field\r\n                    className=\"form-control\"\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    name={\"password\"+i}\r\n                    validate={validatePassword}\r\n                    />\r\n                    {errorMessage(\"password\"+i)}                                \r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Gender</label>\r\n                    <br />\r\n                    <div className=\"form-check form-check-inline\">\r\n                    <Field\r\n                        className=\"form-check-input\"\r\n                        type=\"radio\"\r\n                        name={\"genderOptions\"+i}\r\n                        value=\"Male\"\r\n                        id=\"inlineRadio1\"\r\n                    />\r\n                    <label className=\"form-check-label\" htmlFor=\"inlineRadio1\">\r\n                        Male\r\n                    </label>\r\n                    </div>\r\n                    <div className=\"form-check form-check-inline\">\r\n                    <Field\r\n                        className=\"form-check-input\"\r\n                        type=\"radio\"\r\n                        name={\"genderOptions\"+i}\r\n                        value=\"Female\"\r\n                        id=\"inlineRadio2\"\r\n                    />\r\n                    <label className=\"form-check-label\" htmlFor=\"inlineRadio2\">\r\n                        Female\r\n                    </label>\r\n                    </div>\r\n                    <div className=\"form-check form-check-inline\">\r\n                    <Field\r\n                        className=\"form-check-input\"\r\n                        type=\"radio\"\r\n                        name={\"genderOptions\"+i}\r\n                        value=\" Non-binary\"\r\n                        id=\"inlineRadio3\"\r\n                    />\r\n                    <label className=\"form-check-label\" htmlFor=\"inlineRadio3\">\r\n                        Non-binary\r\n                    </label>\r\n                    </div>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <Field\r\n                    className=\"form-control\"\r\n                    type=\"datetime\"\r\n                    placeholder=\"Date of Birth\"\r\n                    name={\"DateofBirth\"+i}\r\n                    validate={validateDateOfBirth}\r\n                    />\r\n                    {errorMessage(\"DateofBirth\"+i)}                                \r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <Field\r\n                    component=\"textarea\"\r\n                    className=\"form-control\"\r\n                    name={\"About\"+i}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <Field\r\n                    type=\"checkbox\"\r\n                    placeholder=\"Subscribe to Newsletter\"\r\n                    name={\"SubscribetoNewsletter\"+i}\r\n                    id=\"customCheck1\"\r\n                    />\r\n                    <label htmlFor=\"customCheck1\"> Subscribe to Newsletter</label>\r\n                </div>\r\n              </>\r\n              )})}\r\n                <div className=\"form-group\">\r\n                    <button className=\"btn btn-primary\" type=\"submit\">\r\n                    Submit\r\n                    </button>\r\n                </div>              \r\n            </Form>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </Formik>\r\n  );\r\n}","C:\\Users\\test\\Documents\\ReactProject\\react-form\\src\\HookForm2.js",["31"],"import React from 'react';\r\nimport * as Yup from 'yup';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n\r\nconst SignupSchema = Yup.object().shape({\r\n    firstName: Yup.string()\r\n        .min(2, 'Too Short!')\r\n        .max(50, 'Too Long!')\r\n        .required('Required'),\r\n    lastName: Yup.string()\r\n        .min(2, 'Too Short!')\r\n        .max(50, 'Too Long!')\r\n        .required('Required'),\r\n    email: Yup.string().email('Invalid email').required('Required'),\r\n});\r\n\r\nconst errorMessage = error => {\r\n    return <div className=\"invalid-feedback\">{error}</div>;\r\n};\r\n\r\nexport default () => {\r\n    const { register, handleSubmit, errors } = useForm({\r\n        // react-hook-form 默认是表单提交时校验，但也可以改成onBlur时校验\r\n        mode: 'onBlur',\r\n        // 老版本的 react-hook-form 内置了对于yup的集成，但新版本需要引入 yupResolver\r\n        resolver: yupResolver(SignupSchema)\r\n    });\r\n    const onSubmit = data => {\r\n        alert(JSON.stringify(data));\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1>React Hook Form with Yup </h1>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"form-group\">\r\n                    <input\r\n                        className=\"form-control\"\r\n                        type=\"text\"\r\n                        placeholder=\"firstName\"\r\n                        name={\"firstName\"}\r\n                        ref={register}\r\n                    />\r\n                    {errors.firstName && errorMessage(errors.firstName.message)}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <input\r\n                        className=\"form-control\"\r\n                        type=\"text\"\r\n                        placeholder=\"firstName\"\r\n                        name={\"lastName\"}\r\n                        ref={register}\r\n                    />\r\n                    {errors.lastName && errorMessage(errors.lastName.message)}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <input\r\n                        className=\"form-control\"\r\n                        type=\"email\"\r\n                        placeholder=\"Email\"\r\n                        name={\"email\" }\r\n                        ref={register}\r\n                    />\r\n                    {errors.email && errorMessage(errors.email.message)}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <input className=\"btn btn-primary\" type=\"submit\" />\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n};","C:\\Users\\test\\Documents\\ReactProject\\react-form\\src\\FormikForm2.js",["32"],"import React from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nconst SignupSchema = Yup.object().shape({\r\n    firstName: Yup.string()\r\n        .min(2, 'Too Short!')\r\n        .max(50, 'Too Long!')\r\n        .required('Required'),\r\n    lastName: Yup.string()\r\n        .min(2, 'Too Short!')\r\n        .max(50, 'Too Long!')\r\n        .required('Required'),\r\n    email: Yup.string().email('Invalid email').required('Required'),\r\n});\r\n\r\nconst errorMessage = errorName => {\r\n    return <ErrorMessage name={errorName} component=\"div\" className=\"invalid-feedback\" />\r\n};\r\n\r\nexport default () => (\r\n    <div className=\"container\">\r\n        <h1>Formik with yup</h1>\r\n        <Formik\r\n            initialValues={{\r\n                firstName: '',\r\n                lastName: '',\r\n                email: '',\r\n            }}\r\n            validationSchema={SignupSchema}\r\n            onSubmit={values => {\r\n                // same shape as initial values\r\n                console.log(values);\r\n            }}\r\n        >\r\n            <Form>\r\n                <div className=\"form-group\">\r\n                    <Field\r\n                        className=\"form-control\"\r\n                        type=\"text\"\r\n                        placeholder=\"firstName\"\r\n                        name={\"firstName\"}\r\n                    />\r\n                    {errorMessage(\"firstName\")}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <Field\r\n                        className=\"form-control\"\r\n                        type=\"text\"\r\n                        placeholder=\"lastName\"\r\n                        name={\"lastName\"}\r\n                    />\r\n                    {errorMessage(\"lastName\")}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <Field\r\n                        type=\"email\"\r\n                        name={\"email\"}\r\n                        className=\"form-control\"\r\n                        placeholder=\"Email\"\r\n                    />\r\n                    {errorMessage(\"email\")}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <button className=\"btn btn-primary\" type=\"submit\">\r\n                        Submit\r\n                    </button>\r\n                </div>\r\n            </Form>\r\n        </Formik>\r\n    </div>\r\n);",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":19,"column":1,"nodeType":"39","endLine":177,"endColumn":2},{"ruleId":"37","severity":1,"message":"38","line":81,"column":1,"nodeType":"39","endLine":229,"endColumn":2},{"ruleId":"37","severity":1,"message":"38","line":22,"column":1,"nodeType":"39","endLine":73,"endColumn":3},{"ruleId":"37","severity":1,"message":"38","line":21,"column":1,"nodeType":"39","endLine":72,"endColumn":3},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]